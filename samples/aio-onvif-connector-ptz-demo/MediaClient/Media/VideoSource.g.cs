/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class VideoSource : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoSourceExtension? Extension { get; set; } = default;

        /// <summary>
        /// Frame rate in frames per second.
        /// </summary>
        [JsonPropertyName("Framerate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public float Framerate { get; set; } = default!;

        /// <summary>
        /// Optional configuration of the image sensor.
        /// </summary>
        [JsonPropertyName("Imaging")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ImagingSettings? Imaging { get; set; } = default;

        /// <summary>
        /// Horizontal and vertical resolution.
        /// </summary>
        [JsonPropertyName("Resolution")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public VideoResolution Resolution { get; set; } = default!;

        /// <summary>
        /// Unique identifier referencing the physical entity.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Resolution is null)
            {
                throw new ArgumentNullException("Resolution field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Resolution is null)
            {
                throw new ArgumentNullException("Resolution field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
