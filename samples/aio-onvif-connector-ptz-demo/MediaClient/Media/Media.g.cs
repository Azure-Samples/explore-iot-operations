/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using MediaClient;

    [CommandTopic("{ex:namespace}/mrpc/{ex:asset}/{commandName}")]
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public static partial class Media
    {
        public abstract partial class Client : IAsyncDisposable
        {
            private ApplicationContext applicationContext;
            private IMqttPubSubClient mqttClient;
            private readonly GetProfileCommandInvoker getProfileCommandInvoker;
            private readonly GetProfilesCommandInvoker getProfilesCommandInvoker;
            private readonly CreateProfileCommandInvoker createProfileCommandInvoker;
            private readonly DeleteProfileCommandInvoker deleteProfileCommandInvoker;
            private readonly GetVideoEncoderConfigurationCommandInvoker getVideoEncoderConfigurationCommandInvoker;
            private readonly GetVideoEncoderConfigurationsCommandInvoker getVideoEncoderConfigurationsCommandInvoker;
            private readonly AddVideoEncoderConfigurationCommandInvoker addVideoEncoderConfigurationCommandInvoker;
            private readonly RemoveVideoEncoderConfigurationCommandInvoker removeVideoEncoderConfigurationCommandInvoker;
            private readonly SetVideoEncoderConfigurationCommandInvoker setVideoEncoderConfigurationCommandInvoker;
            private readonly GetCompatibleVideoEncoderConfigurationsCommandInvoker getCompatibleVideoEncoderConfigurationsCommandInvoker;
            private readonly GetVideoEncoderConfigurationOptionsCommandInvoker getVideoEncoderConfigurationOptionsCommandInvoker;
            private readonly GetGuaranteedNumberOfVideoEncoderInstancesCommandInvoker getGuaranteedNumberOfVideoEncoderInstancesCommandInvoker;
            private readonly GetVideoSourcesCommandInvoker getVideoSourcesCommandInvoker;
            private readonly GetVideoSourceConfigurationCommandInvoker getVideoSourceConfigurationCommandInvoker;
            private readonly GetVideoSourceConfigurationsCommandInvoker getVideoSourceConfigurationsCommandInvoker;
            private readonly AddVideoSourceConfigurationCommandInvoker addVideoSourceConfigurationCommandInvoker;
            private readonly RemoveVideoSourceConfigurationCommandInvoker removeVideoSourceConfigurationCommandInvoker;
            private readonly SetVideoSourceConfigurationCommandInvoker setVideoSourceConfigurationCommandInvoker;
            private readonly GetCompatibleVideoSourceConfigurationsCommandInvoker getCompatibleVideoSourceConfigurationsCommandInvoker;
            private readonly GetVideoSourceConfigurationOptionsCommandInvoker getVideoSourceConfigurationOptionsCommandInvoker;
            private readonly GetMetadataConfigurationCommandInvoker getMetadataConfigurationCommandInvoker;
            private readonly GetMetadataConfigurationsCommandInvoker getMetadataConfigurationsCommandInvoker;
            private readonly GetCompatibleMetadataConfigurationsCommandInvoker getCompatibleMetadataConfigurationsCommandInvoker;
            private readonly AddMetadataConfigurationCommandInvoker addMetadataConfigurationCommandInvoker;
            private readonly SetMetadataConfigurationCommandInvoker setMetadataConfigurationCommandInvoker;
            private readonly RemoveMetadataConfigurationCommandInvoker removeMetadataConfigurationCommandInvoker;
            private readonly GetMetadataConfigurationOptionsCommandInvoker getMetadataConfigurationOptionsCommandInvoker;
            private readonly SetSynchronizationPointCommandInvoker setSynchronizationPointCommandInvoker;
            private readonly AddPtzconfigurationCommandInvoker addPtzconfigurationCommandInvoker;
            private readonly RemovePtzconfigurationCommandInvoker removePtzconfigurationCommandInvoker;
            private readonly GetAudioSourcesCommandInvoker getAudioSourcesCommandInvoker;
            private readonly GetAudioSourceConfigurationCommandInvoker getAudioSourceConfigurationCommandInvoker;
            private readonly GetAudioSourceConfigurationsCommandInvoker getAudioSourceConfigurationsCommandInvoker;
            private readonly AddAudioSourceConfigurationCommandInvoker addAudioSourceConfigurationCommandInvoker;
            private readonly RemoveAudioSourceConfigurationCommandInvoker removeAudioSourceConfigurationCommandInvoker;
            private readonly SetAudioSourceConfigurationCommandInvoker setAudioSourceConfigurationCommandInvoker;
            private readonly GetAudioSourceConfigurationOptionsCommandInvoker getAudioSourceConfigurationOptionsCommandInvoker;
            private readonly GetCompatibleAudioSourceConfigurationsCommandInvoker getCompatibleAudioSourceConfigurationsCommandInvoker;
            private readonly GetAudioEncoderConfigurationCommandInvoker getAudioEncoderConfigurationCommandInvoker;
            private readonly GetAudioEncoderConfigurationsCommandInvoker getAudioEncoderConfigurationsCommandInvoker;
            private readonly AddAudioEncoderConfigurationCommandInvoker addAudioEncoderConfigurationCommandInvoker;
            private readonly RemoveAudioEncoderConfigurationCommandInvoker removeAudioEncoderConfigurationCommandInvoker;
            private readonly SetAudioEncoderConfigurationCommandInvoker setAudioEncoderConfigurationCommandInvoker;
            private readonly GetCompatibleAudioEncoderConfigurationsCommandInvoker getCompatibleAudioEncoderConfigurationsCommandInvoker;
            private readonly GetAudioEncoderConfigurationOptionsCommandInvoker getAudioEncoderConfigurationOptionsCommandInvoker;
            private readonly StartMulticastStreamingCommandInvoker startMulticastStreamingCommandInvoker;

            public Client(ApplicationContext applicationContext, IMqttPubSubClient mqttClient)
            {
                this.applicationContext = applicationContext;
                this.mqttClient = mqttClient;
                this.CustomTopicTokenMap = new();

                this.getProfileCommandInvoker = new GetProfileCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getProfilesCommandInvoker = new GetProfilesCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.createProfileCommandInvoker = new CreateProfileCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.deleteProfileCommandInvoker = new DeleteProfileCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoEncoderConfigurationCommandInvoker = new GetVideoEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoEncoderConfigurationsCommandInvoker = new GetVideoEncoderConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.addVideoEncoderConfigurationCommandInvoker = new AddVideoEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removeVideoEncoderConfigurationCommandInvoker = new RemoveVideoEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setVideoEncoderConfigurationCommandInvoker = new SetVideoEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getCompatibleVideoEncoderConfigurationsCommandInvoker = new GetCompatibleVideoEncoderConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoEncoderConfigurationOptionsCommandInvoker = new GetVideoEncoderConfigurationOptionsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getGuaranteedNumberOfVideoEncoderInstancesCommandInvoker = new GetGuaranteedNumberOfVideoEncoderInstancesCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoSourcesCommandInvoker = new GetVideoSourcesCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoSourceConfigurationCommandInvoker = new GetVideoSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoSourceConfigurationsCommandInvoker = new GetVideoSourceConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.addVideoSourceConfigurationCommandInvoker = new AddVideoSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removeVideoSourceConfigurationCommandInvoker = new RemoveVideoSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setVideoSourceConfigurationCommandInvoker = new SetVideoSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getCompatibleVideoSourceConfigurationsCommandInvoker = new GetCompatibleVideoSourceConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getVideoSourceConfigurationOptionsCommandInvoker = new GetVideoSourceConfigurationOptionsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getMetadataConfigurationCommandInvoker = new GetMetadataConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getMetadataConfigurationsCommandInvoker = new GetMetadataConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getCompatibleMetadataConfigurationsCommandInvoker = new GetCompatibleMetadataConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.addMetadataConfigurationCommandInvoker = new AddMetadataConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setMetadataConfigurationCommandInvoker = new SetMetadataConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removeMetadataConfigurationCommandInvoker = new RemoveMetadataConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getMetadataConfigurationOptionsCommandInvoker = new GetMetadataConfigurationOptionsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setSynchronizationPointCommandInvoker = new SetSynchronizationPointCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.addPtzconfigurationCommandInvoker = new AddPtzconfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removePtzconfigurationCommandInvoker = new RemovePtzconfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioSourcesCommandInvoker = new GetAudioSourcesCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioSourceConfigurationCommandInvoker = new GetAudioSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioSourceConfigurationsCommandInvoker = new GetAudioSourceConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.addAudioSourceConfigurationCommandInvoker = new AddAudioSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removeAudioSourceConfigurationCommandInvoker = new RemoveAudioSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setAudioSourceConfigurationCommandInvoker = new SetAudioSourceConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioSourceConfigurationOptionsCommandInvoker = new GetAudioSourceConfigurationOptionsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getCompatibleAudioSourceConfigurationsCommandInvoker = new GetCompatibleAudioSourceConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioEncoderConfigurationCommandInvoker = new GetAudioEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioEncoderConfigurationsCommandInvoker = new GetAudioEncoderConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.addAudioEncoderConfigurationCommandInvoker = new AddAudioEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removeAudioEncoderConfigurationCommandInvoker = new RemoveAudioEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setAudioEncoderConfigurationCommandInvoker = new SetAudioEncoderConfigurationCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getCompatibleAudioEncoderConfigurationsCommandInvoker = new GetCompatibleAudioEncoderConfigurationsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getAudioEncoderConfigurationOptionsCommandInvoker = new GetAudioEncoderConfigurationOptionsCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.startMulticastStreamingCommandInvoker = new StartMulticastStreamingCommandInvoker(applicationContext, mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
            }

            public GetProfileCommandInvoker GetProfileCommandInvoker { get => this.getProfileCommandInvoker; }
            public GetProfilesCommandInvoker GetProfilesCommandInvoker { get => this.getProfilesCommandInvoker; }
            public CreateProfileCommandInvoker CreateProfileCommandInvoker { get => this.createProfileCommandInvoker; }
            public DeleteProfileCommandInvoker DeleteProfileCommandInvoker { get => this.deleteProfileCommandInvoker; }
            public GetVideoEncoderConfigurationCommandInvoker GetVideoEncoderConfigurationCommandInvoker { get => this.getVideoEncoderConfigurationCommandInvoker; }
            public GetVideoEncoderConfigurationsCommandInvoker GetVideoEncoderConfigurationsCommandInvoker { get => this.getVideoEncoderConfigurationsCommandInvoker; }
            public AddVideoEncoderConfigurationCommandInvoker AddVideoEncoderConfigurationCommandInvoker { get => this.addVideoEncoderConfigurationCommandInvoker; }
            public RemoveVideoEncoderConfigurationCommandInvoker RemoveVideoEncoderConfigurationCommandInvoker { get => this.removeVideoEncoderConfigurationCommandInvoker; }
            public SetVideoEncoderConfigurationCommandInvoker SetVideoEncoderConfigurationCommandInvoker { get => this.setVideoEncoderConfigurationCommandInvoker; }
            public GetCompatibleVideoEncoderConfigurationsCommandInvoker GetCompatibleVideoEncoderConfigurationsCommandInvoker { get => this.getCompatibleVideoEncoderConfigurationsCommandInvoker; }
            public GetVideoEncoderConfigurationOptionsCommandInvoker GetVideoEncoderConfigurationOptionsCommandInvoker { get => this.getVideoEncoderConfigurationOptionsCommandInvoker; }
            public GetGuaranteedNumberOfVideoEncoderInstancesCommandInvoker GetGuaranteedNumberOfVideoEncoderInstancesCommandInvoker { get => this.getGuaranteedNumberOfVideoEncoderInstancesCommandInvoker; }
            public GetVideoSourcesCommandInvoker GetVideoSourcesCommandInvoker { get => this.getVideoSourcesCommandInvoker; }
            public GetVideoSourceConfigurationCommandInvoker GetVideoSourceConfigurationCommandInvoker { get => this.getVideoSourceConfigurationCommandInvoker; }
            public GetVideoSourceConfigurationsCommandInvoker GetVideoSourceConfigurationsCommandInvoker { get => this.getVideoSourceConfigurationsCommandInvoker; }
            public AddVideoSourceConfigurationCommandInvoker AddVideoSourceConfigurationCommandInvoker { get => this.addVideoSourceConfigurationCommandInvoker; }
            public RemoveVideoSourceConfigurationCommandInvoker RemoveVideoSourceConfigurationCommandInvoker { get => this.removeVideoSourceConfigurationCommandInvoker; }
            public SetVideoSourceConfigurationCommandInvoker SetVideoSourceConfigurationCommandInvoker { get => this.setVideoSourceConfigurationCommandInvoker; }
            public GetCompatibleVideoSourceConfigurationsCommandInvoker GetCompatibleVideoSourceConfigurationsCommandInvoker { get => this.getCompatibleVideoSourceConfigurationsCommandInvoker; }
            public GetVideoSourceConfigurationOptionsCommandInvoker GetVideoSourceConfigurationOptionsCommandInvoker { get => this.getVideoSourceConfigurationOptionsCommandInvoker; }
            public GetMetadataConfigurationCommandInvoker GetMetadataConfigurationCommandInvoker { get => this.getMetadataConfigurationCommandInvoker; }
            public GetMetadataConfigurationsCommandInvoker GetMetadataConfigurationsCommandInvoker { get => this.getMetadataConfigurationsCommandInvoker; }
            public GetCompatibleMetadataConfigurationsCommandInvoker GetCompatibleMetadataConfigurationsCommandInvoker { get => this.getCompatibleMetadataConfigurationsCommandInvoker; }
            public AddMetadataConfigurationCommandInvoker AddMetadataConfigurationCommandInvoker { get => this.addMetadataConfigurationCommandInvoker; }
            public SetMetadataConfigurationCommandInvoker SetMetadataConfigurationCommandInvoker { get => this.setMetadataConfigurationCommandInvoker; }
            public RemoveMetadataConfigurationCommandInvoker RemoveMetadataConfigurationCommandInvoker { get => this.removeMetadataConfigurationCommandInvoker; }
            public GetMetadataConfigurationOptionsCommandInvoker GetMetadataConfigurationOptionsCommandInvoker { get => this.getMetadataConfigurationOptionsCommandInvoker; }
            public SetSynchronizationPointCommandInvoker SetSynchronizationPointCommandInvoker { get => this.setSynchronizationPointCommandInvoker; }
            public AddPtzconfigurationCommandInvoker AddPtzconfigurationCommandInvoker { get => this.addPtzconfigurationCommandInvoker; }
            public RemovePtzconfigurationCommandInvoker RemovePtzconfigurationCommandInvoker { get => this.removePtzconfigurationCommandInvoker; }
            public GetAudioSourcesCommandInvoker GetAudioSourcesCommandInvoker { get => this.getAudioSourcesCommandInvoker; }
            public GetAudioSourceConfigurationCommandInvoker GetAudioSourceConfigurationCommandInvoker { get => this.getAudioSourceConfigurationCommandInvoker; }
            public GetAudioSourceConfigurationsCommandInvoker GetAudioSourceConfigurationsCommandInvoker { get => this.getAudioSourceConfigurationsCommandInvoker; }
            public AddAudioSourceConfigurationCommandInvoker AddAudioSourceConfigurationCommandInvoker { get => this.addAudioSourceConfigurationCommandInvoker; }
            public RemoveAudioSourceConfigurationCommandInvoker RemoveAudioSourceConfigurationCommandInvoker { get => this.removeAudioSourceConfigurationCommandInvoker; }
            public SetAudioSourceConfigurationCommandInvoker SetAudioSourceConfigurationCommandInvoker { get => this.setAudioSourceConfigurationCommandInvoker; }
            public GetAudioSourceConfigurationOptionsCommandInvoker GetAudioSourceConfigurationOptionsCommandInvoker { get => this.getAudioSourceConfigurationOptionsCommandInvoker; }
            public GetCompatibleAudioSourceConfigurationsCommandInvoker GetCompatibleAudioSourceConfigurationsCommandInvoker { get => this.getCompatibleAudioSourceConfigurationsCommandInvoker; }
            public GetAudioEncoderConfigurationCommandInvoker GetAudioEncoderConfigurationCommandInvoker { get => this.getAudioEncoderConfigurationCommandInvoker; }
            public GetAudioEncoderConfigurationsCommandInvoker GetAudioEncoderConfigurationsCommandInvoker { get => this.getAudioEncoderConfigurationsCommandInvoker; }
            public AddAudioEncoderConfigurationCommandInvoker AddAudioEncoderConfigurationCommandInvoker { get => this.addAudioEncoderConfigurationCommandInvoker; }
            public RemoveAudioEncoderConfigurationCommandInvoker RemoveAudioEncoderConfigurationCommandInvoker { get => this.removeAudioEncoderConfigurationCommandInvoker; }
            public SetAudioEncoderConfigurationCommandInvoker SetAudioEncoderConfigurationCommandInvoker { get => this.setAudioEncoderConfigurationCommandInvoker; }
            public GetCompatibleAudioEncoderConfigurationsCommandInvoker GetCompatibleAudioEncoderConfigurationsCommandInvoker { get => this.getCompatibleAudioEncoderConfigurationsCommandInvoker; }
            public GetAudioEncoderConfigurationOptionsCommandInvoker GetAudioEncoderConfigurationOptionsCommandInvoker { get => this.getAudioEncoderConfigurationOptionsCommandInvoker; }
            public StartMulticastStreamingCommandInvoker StartMulticastStreamingCommandInvoker { get => this.startMulticastStreamingCommandInvoker; }

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

            public RpcCallAsync<GetProfileResponsePayload> GetProfileAsync(GetProfileRequestPayload request, Dictionary<string, string> customTopicTokens, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                customTopicTokens["invokerClientId"] = clientId;

                return new RpcCallAsync<GetProfileResponsePayload>(this.getProfileCommandInvoker.InvokeCommandAsync(request, metadata, customTopicTokens, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetProfilesResponsePayload> GetProfilesAsync(Dictionary<string, string> customTopicTokens, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                customTopicTokens["invokerClientId"] = clientId;

                return new RpcCallAsync<GetProfilesResponsePayload>(this.getProfilesCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, customTopicTokens, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<CreateProfileResponsePayload> CreateProfileAsync(CreateProfileRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<CreateProfileResponsePayload>(this.createProfileCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> DeleteProfileAsync(DeleteProfileRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.deleteProfileCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoEncoderConfigurationResponsePayload> GetVideoEncoderConfigurationAsync(GetVideoEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoEncoderConfigurationResponsePayload>(this.getVideoEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoEncoderConfigurationsResponsePayload> GetVideoEncoderConfigurationsAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoEncoderConfigurationsResponsePayload>(this.getVideoEncoderConfigurationsCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AddVideoEncoderConfigurationAsync(AddVideoEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.addVideoEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemoveVideoEncoderConfigurationAsync(RemoveVideoEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.removeVideoEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetVideoEncoderConfigurationAsync(SetVideoEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.setVideoEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetCompatibleVideoEncoderConfigurationsResponsePayload> GetCompatibleVideoEncoderConfigurationsAsync(GetCompatibleVideoEncoderConfigurationsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetCompatibleVideoEncoderConfigurationsResponsePayload>(this.getCompatibleVideoEncoderConfigurationsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoEncoderConfigurationOptionsResponsePayload> GetVideoEncoderConfigurationOptionsAsync(GetVideoEncoderConfigurationOptionsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoEncoderConfigurationOptionsResponsePayload>(this.getVideoEncoderConfigurationOptionsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetGuaranteedNumberOfVideoEncoderInstancesResponsePayload> GetGuaranteedNumberOfVideoEncoderInstancesAsync(GetGuaranteedNumberOfVideoEncoderInstancesRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetGuaranteedNumberOfVideoEncoderInstancesResponsePayload>(this.getGuaranteedNumberOfVideoEncoderInstancesCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoSourcesResponsePayload> GetVideoSourcesAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoSourcesResponsePayload>(this.getVideoSourcesCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoSourceConfigurationResponsePayload> GetVideoSourceConfigurationAsync(GetVideoSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoSourceConfigurationResponsePayload>(this.getVideoSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoSourceConfigurationsResponsePayload> GetVideoSourceConfigurationsAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoSourceConfigurationsResponsePayload>(this.getVideoSourceConfigurationsCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AddVideoSourceConfigurationAsync(AddVideoSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.addVideoSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemoveVideoSourceConfigurationAsync(RemoveVideoSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.removeVideoSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetVideoSourceConfigurationAsync(SetVideoSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.setVideoSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetCompatibleVideoSourceConfigurationsResponsePayload> GetCompatibleVideoSourceConfigurationsAsync(GetCompatibleVideoSourceConfigurationsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetCompatibleVideoSourceConfigurationsResponsePayload>(this.getCompatibleVideoSourceConfigurationsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetVideoSourceConfigurationOptionsResponsePayload> GetVideoSourceConfigurationOptionsAsync(GetVideoSourceConfigurationOptionsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetVideoSourceConfigurationOptionsResponsePayload>(this.getVideoSourceConfigurationOptionsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetMetadataConfigurationResponsePayload> GetMetadataConfigurationAsync(GetMetadataConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetMetadataConfigurationResponsePayload>(this.getMetadataConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetMetadataConfigurationsResponsePayload> GetMetadataConfigurationsAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetMetadataConfigurationsResponsePayload>(this.getMetadataConfigurationsCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetCompatibleMetadataConfigurationsResponsePayload> GetCompatibleMetadataConfigurationsAsync(GetCompatibleMetadataConfigurationsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetCompatibleMetadataConfigurationsResponsePayload>(this.getCompatibleMetadataConfigurationsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AddMetadataConfigurationAsync(AddMetadataConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.addMetadataConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetMetadataConfigurationAsync(SetMetadataConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.setMetadataConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemoveMetadataConfigurationAsync(RemoveMetadataConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.removeMetadataConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetMetadataConfigurationOptionsResponsePayload> GetMetadataConfigurationOptionsAsync(GetMetadataConfigurationOptionsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetMetadataConfigurationOptionsResponsePayload>(this.getMetadataConfigurationOptionsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetSynchronizationPointAsync(SetSynchronizationPointRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.setSynchronizationPointCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AddPtzconfigurationAsync(AddPtzconfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.addPtzconfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemovePtzconfigurationAsync(RemovePtzconfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.removePtzconfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioSourcesResponsePayload> GetAudioSourcesAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioSourcesResponsePayload>(this.getAudioSourcesCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioSourceConfigurationResponsePayload> GetAudioSourceConfigurationAsync(GetAudioSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioSourceConfigurationResponsePayload>(this.getAudioSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioSourceConfigurationsResponsePayload> GetAudioSourceConfigurationsAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioSourceConfigurationsResponsePayload>(this.getAudioSourceConfigurationsCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AddAudioSourceConfigurationAsync(AddAudioSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.addAudioSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemoveAudioSourceConfigurationAsync(RemoveAudioSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.removeAudioSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetAudioSourceConfigurationAsync(SetAudioSourceConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.setAudioSourceConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioSourceConfigurationOptionsResponsePayload> GetAudioSourceConfigurationOptionsAsync(GetAudioSourceConfigurationOptionsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioSourceConfigurationOptionsResponsePayload>(this.getAudioSourceConfigurationOptionsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetCompatibleAudioSourceConfigurationsResponsePayload> GetCompatibleAudioSourceConfigurationsAsync(GetCompatibleAudioSourceConfigurationsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetCompatibleAudioSourceConfigurationsResponsePayload>(this.getCompatibleAudioSourceConfigurationsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioEncoderConfigurationResponsePayload> GetAudioEncoderConfigurationAsync(GetAudioEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioEncoderConfigurationResponsePayload>(this.getAudioEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioEncoderConfigurationsResponsePayload> GetAudioEncoderConfigurationsAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioEncoderConfigurationsResponsePayload>(this.getAudioEncoderConfigurationsCommandInvoker.InvokeCommandAsync(new EmptyJson(), metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AddAudioEncoderConfigurationAsync(AddAudioEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.addAudioEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemoveAudioEncoderConfigurationAsync(RemoveAudioEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.removeAudioEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetAudioEncoderConfigurationAsync(SetAudioEncoderConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.setAudioEncoderConfigurationCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetCompatibleAudioEncoderConfigurationsResponsePayload> GetCompatibleAudioEncoderConfigurationsAsync(GetCompatibleAudioEncoderConfigurationsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetCompatibleAudioEncoderConfigurationsResponsePayload>(this.getCompatibleAudioEncoderConfigurationsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetAudioEncoderConfigurationOptionsResponsePayload> GetAudioEncoderConfigurationOptionsAsync(GetAudioEncoderConfigurationOptionsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<GetAudioEncoderConfigurationOptionsResponsePayload>(this.getAudioEncoderConfigurationOptionsCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> StartMulticastStreamingAsync(StartMulticastStreamingRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                Dictionary<string, string>? transientTopicTokenMap = new()
                {
                    { "invokerClientId", clientId },
                };

                return new RpcCallAsync<EmptyJson>(this.startMulticastStreamingCommandInvoker.InvokeCommandAsync(request, metadata, transientTopicTokenMap, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public async ValueTask DisposeAsync()
            {
                await this.getProfileCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getProfilesCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.createProfileCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.deleteProfileCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoEncoderConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.addVideoEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removeVideoEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setVideoEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getCompatibleVideoEncoderConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoEncoderConfigurationOptionsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getGuaranteedNumberOfVideoEncoderInstancesCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoSourcesCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoSourceConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.addVideoSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removeVideoSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setVideoSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getCompatibleVideoSourceConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getVideoSourceConfigurationOptionsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getMetadataConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getMetadataConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getCompatibleMetadataConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.addMetadataConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setMetadataConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removeMetadataConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getMetadataConfigurationOptionsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setSynchronizationPointCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.addPtzconfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removePtzconfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioSourcesCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioSourceConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.addAudioSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removeAudioSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setAudioSourceConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioSourceConfigurationOptionsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getCompatibleAudioSourceConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioEncoderConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.addAudioEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removeAudioEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setAudioEncoderConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getCompatibleAudioEncoderConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getAudioEncoderConfigurationOptionsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.startMulticastStreamingCommandInvoker.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.getProfileCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getProfilesCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.createProfileCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.deleteProfileCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoEncoderConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.addVideoEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removeVideoEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setVideoEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getCompatibleVideoEncoderConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoEncoderConfigurationOptionsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getGuaranteedNumberOfVideoEncoderInstancesCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoSourcesCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoSourceConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.addVideoSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removeVideoSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setVideoSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getCompatibleVideoSourceConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getVideoSourceConfigurationOptionsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getMetadataConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getMetadataConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getCompatibleMetadataConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.addMetadataConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setMetadataConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removeMetadataConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getMetadataConfigurationOptionsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setSynchronizationPointCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.addPtzconfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removePtzconfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioSourcesCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioSourceConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.addAudioSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removeAudioSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setAudioSourceConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioSourceConfigurationOptionsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getCompatibleAudioSourceConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioEncoderConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.addAudioEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removeAudioEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setAudioEncoderConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getCompatibleAudioEncoderConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAudioEncoderConfigurationOptionsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.startMulticastStreamingCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }
    }
}
