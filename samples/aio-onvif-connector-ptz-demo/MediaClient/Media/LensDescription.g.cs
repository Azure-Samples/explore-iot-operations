/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class LensDescription : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Optional focal length of the optical system.
        /// </summary>
        [JsonPropertyName("FocalLength")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? FocalLength { get; set; } = default;

        /// <summary>
        /// Offset of the lens center to the imager center in normalized coordinates.
        /// </summary>
        [JsonPropertyName("Offset")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public LensOffset Offset { get; set; } = default!;

        /// <summary>
        /// Radial description of the projection characteristics. The resulting curve is defined by the B-Spline interpolation over the given elements. The element for Radius zero shall not be provided. The projection points shall be ordered with ascending Radius. Items outside the last projection Radius shall be assumed to be invisible (black).
        /// </summary>
        [JsonPropertyName("Projection")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<LensProjection> Projection { get; set; } = default!;

        /// <summary>
        /// Compensation of the x coordinate needed for the ONVIF normalized coordinate system.
        /// </summary>
        [JsonPropertyName("XFactor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public float Xfactor { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Offset is null)
            {
                throw new ArgumentNullException("Offset field cannot be null");
            }
            if (Projection is null)
            {
                throw new ArgumentNullException("Projection field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Offset is null)
            {
                throw new ArgumentNullException("Offset field cannot be null");
            }
            if (Projection is null)
            {
                throw new ArgumentNullException("Projection field cannot be null");
            }
        }
    }
}
