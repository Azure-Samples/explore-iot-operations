/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class VideoSourceConfiguration : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Optional bounds of the video source.
        /// </summary>
        [JsonPropertyName("Bounds")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public IntRectangle Bounds { get; set; } = default!;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoSourceConfigurationExtension? Extension { get; set; } = default;

        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Reference to the physical input.
        /// </summary>
        [JsonPropertyName("SourceToken")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string SourceToken { get; set; } = default!;

        /// <summary>
        /// Token that uniquely references this configuration. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Number of internal references currently using this configuration. This informational parameter is read-only. Deprecated for Media2 Service..
        /// </summary>
        [JsonPropertyName("UseCount")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int UseCount { get; set; } = default!;

        /// <summary>
        /// The 'ViewMode' Field.
        /// </summary>
        [JsonPropertyName("ViewMode")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? ViewMode { get; set; } = default;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Bounds is null)
            {
                throw new ArgumentNullException("Bounds field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (SourceToken is null)
            {
                throw new ArgumentNullException("SourceToken field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Bounds is null)
            {
                throw new ArgumentNullException("Bounds field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (SourceToken is null)
            {
                throw new ArgumentNullException("SourceToken field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
