/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class VideoEncoderConfiguration : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Used video codec, either Jpeg, H.264 or Mpeg4
        /// </summary>
        [JsonPropertyName("Encoding")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public VideoEncoding Encoding { get; set; } = default!;

        /// <summary>
        /// A value of true indicates that frame rate is a fixed value rather than an upper limit,and that the video encoder shall prioritize frame rate over all other adaptableconfiguration values such as bitrate.  Default is false.
        /// </summary>
        [JsonPropertyName("GuaranteedFrameRate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? GuaranteedFrameRate { get; set; } = default;

        /// <summary>
        /// Optional element to configure H.264 related parameters.
        /// </summary>
        [JsonPropertyName("H264")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public H264configuration? H264 { get; set; } = default;

        /// <summary>
        /// Optional element to configure Mpeg4 related parameters.
        /// </summary>
        [JsonPropertyName("MPEG4")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Mpeg4configuration? Mpeg4 { get; set; } = default;

        /// <summary>
        /// Defines the multicast settings that could be used for video streaming.
        /// </summary>
        [JsonPropertyName("Multicast")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public MulticastConfiguration Multicast { get; set; } = default!;

        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
        /// </summary>
        [JsonPropertyName("Quality")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public float Quality { get; set; } = default!;

        /// <summary>
        /// Optional element to configure rate control related parameters.
        /// </summary>
        [JsonPropertyName("RateControl")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoRateControl? RateControl { get; set; } = default;

        /// <summary>
        /// Configured video resolution
        /// </summary>
        [JsonPropertyName("Resolution")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public VideoResolution Resolution { get; set; } = default!;

        /// <summary>
        /// The rtsp session timeout for the related video stream
        /// </summary>
        [JsonPropertyName("SessionTimeout")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public TimeSpan SessionTimeout { get; set; } = default!;

        /// <summary>
        /// Token that uniquely references this configuration. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Number of internal references currently using this configuration. This informational parameter is read-only. Deprecated for Media2 Service.
        /// </summary>
        [JsonPropertyName("UseCount")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int UseCount { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Multicast is null)
            {
                throw new ArgumentNullException("Multicast field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Resolution is null)
            {
                throw new ArgumentNullException("Resolution field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Multicast is null)
            {
                throw new ArgumentNullException("Multicast field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Resolution is null)
            {
                throw new ArgumentNullException("Resolution field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
