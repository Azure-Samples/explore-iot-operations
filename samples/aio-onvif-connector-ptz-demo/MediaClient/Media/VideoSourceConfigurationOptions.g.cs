/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class VideoSourceConfigurationOptions : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Supported range for the capturing area.Device that does not support cropped streaming shall express BoundsRange option as mentioned belowBoundsRange-&gt;XRange and BoundsRange-&gt;YRange with same Min/Max values HeightRange and WidthRange Min/Max values same as VideoSource Height and Width Limits.
        /// </summary>
        [JsonPropertyName("BoundsRange")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public IntRectangleRange BoundsRange { get; set; } = default!;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoSourceConfigurationOptionsExtension? Extension { get; set; } = default;

        /// <summary>
        /// Maximum number of profiles.
        /// </summary>
        [JsonPropertyName("MaximumNumberOfProfiles")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? MaximumNumberOfProfiles { get; set; } = default;

        /// <summary>
        /// List of physical inputs.
        /// </summary>
        [JsonPropertyName("VideoSourceTokensAvailable")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<string> VideoSourceTokensAvailable { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (BoundsRange is null)
            {
                throw new ArgumentNullException("BoundsRange field cannot be null");
            }
            if (VideoSourceTokensAvailable is null)
            {
                throw new ArgumentNullException("VideoSourceTokensAvailable field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (BoundsRange is null)
            {
                throw new ArgumentNullException("BoundsRange field cannot be null");
            }
            if (VideoSourceTokensAvailable is null)
            {
                throw new ArgumentNullException("VideoSourceTokensAvailable field cannot be null");
            }
        }
    }
}
