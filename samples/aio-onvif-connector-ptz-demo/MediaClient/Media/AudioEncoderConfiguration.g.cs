/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class AudioEncoderConfiguration : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// The output bitrate in kbps.
        /// </summary>
        [JsonPropertyName("Bitrate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int Bitrate { get; set; } = default!;

        /// <summary>
        /// Audio codec used for encoding the audio input (either G.711, G.726 or AAC)
        /// </summary>
        [JsonPropertyName("Encoding")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public AudioEncoding Encoding { get; set; } = default!;

        /// <summary>
        /// Defines the multicast settings that could be used for video streaming.
        /// </summary>
        [JsonPropertyName("Multicast")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public MulticastConfiguration Multicast { get; set; } = default!;

        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The output sample rate in kHz.
        /// </summary>
        [JsonPropertyName("SampleRate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int SampleRate { get; set; } = default!;

        /// <summary>
        /// The rtsp session timeout for the related audio stream
        /// </summary>
        [JsonPropertyName("SessionTimeout")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public TimeSpan SessionTimeout { get; set; } = default!;

        /// <summary>
        /// Token that uniquely references this configuration. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Number of internal references currently using this configuration. This informational parameter is read-only. Deprecated for Media2 Service.
        /// </summary>
        [JsonPropertyName("UseCount")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int UseCount { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Multicast is null)
            {
                throw new ArgumentNullException("Multicast field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Multicast is null)
            {
                throw new ArgumentNullException("Multicast field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
