/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Mpeg4options : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of '1' means that all frames are encoded.
        /// </summary>
        [JsonPropertyName("EncodingIntervalRange")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public IntRange EncodingIntervalRange { get; set; } = default!;

        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [JsonPropertyName("FrameRateRange")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public IntRange FrameRateRange { get; set; } = default!;

        /// <summary>
        /// Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
        /// </summary>
        [JsonPropertyName("GovLengthRange")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public IntRange GovLengthRange { get; set; } = default!;

        /// <summary>
        /// List of supported MPEG4 profiles.
        /// </summary>
        [JsonPropertyName("Mpeg4ProfilesSupported")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Mpeg4profile> Mpeg4profilesSupported { get; set; } = default!;

        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [JsonPropertyName("ResolutionsAvailable")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<VideoResolution> ResolutionsAvailable { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (EncodingIntervalRange is null)
            {
                throw new ArgumentNullException("EncodingIntervalRange field cannot be null");
            }
            if (FrameRateRange is null)
            {
                throw new ArgumentNullException("FrameRateRange field cannot be null");
            }
            if (GovLengthRange is null)
            {
                throw new ArgumentNullException("GovLengthRange field cannot be null");
            }
            if (Mpeg4profilesSupported is null)
            {
                throw new ArgumentNullException("Mpeg4ProfilesSupported field cannot be null");
            }
            if (ResolutionsAvailable is null)
            {
                throw new ArgumentNullException("ResolutionsAvailable field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (EncodingIntervalRange is null)
            {
                throw new ArgumentNullException("EncodingIntervalRange field cannot be null");
            }
            if (FrameRateRange is null)
            {
                throw new ArgumentNullException("FrameRateRange field cannot be null");
            }
            if (GovLengthRange is null)
            {
                throw new ArgumentNullException("GovLengthRange field cannot be null");
            }
            if (Mpeg4profilesSupported is null)
            {
                throw new ArgumentNullException("Mpeg4ProfilesSupported field cannot be null");
            }
            if (ResolutionsAvailable is null)
            {
                throw new ArgumentNullException("ResolutionsAvailable field cannot be null");
            }
        }
    }
}
