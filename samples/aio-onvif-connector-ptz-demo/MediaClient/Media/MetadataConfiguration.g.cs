/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class MetadataConfiguration : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Defines whether the streamed metadata will include metadata from the analytics engines (video, cell motion, audio etc.)
        /// </summary>
        [JsonPropertyName("Analytics")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? Analytics { get; set; } = default;

        /// <summary>
        /// Indication which AnalyticsModules shall output metadata.Note that the streaming behavior is undefined if the list includes items that are not part of the associated AnalyticsConfiguration.
        /// </summary>
        [JsonPropertyName("AnalyticsEngineConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public AnalyticsEngineConfiguration? AnalyticsEngineConfiguration { get; set; } = default;

        /// <summary>
        /// Optional parameter to configure compression type of Metadata payload. Use values from enumeration MetadataCompressionType.
        /// </summary>
        [JsonPropertyName("CompressionType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? CompressionType { get; set; } = default;

        /// <summary>
        /// Optional element to configure the streaming of events. A client might be interested in receiving all, none or some of the events produced by the device:To get all events: Include the Events element but do not include a filter.To get no events: Do not include the Events element.To get only some events: Include the Events element and include a filter in the element.
        /// </summary>
        [JsonPropertyName("Events")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public EventSubscription? Events { get; set; } = default;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public MetadataConfigurationExtension? Extension { get; set; } = default;

        /// <summary>
        /// Optional parameter to configure if the metadata stream shall contain the Geo Location coordinates of each target.
        /// </summary>
        [JsonPropertyName("GeoLocation")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? GeoLocation { get; set; } = default;

        /// <summary>
        /// Defines the multicast settings that could be used for video streaming.
        /// </summary>
        [JsonPropertyName("Multicast")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public MulticastConfiguration Multicast { get; set; } = default!;

        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// optional element to configure which PTZ related data is to include in the metadata stream
        /// </summary>
        [JsonPropertyName("PTZStatus")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Ptzfilter? Ptzstatus { get; set; } = default;

        /// <summary>
        /// The rtsp session timeout for the related audio stream (when using Media2 Service, this value is deprecated and ignored)
        /// </summary>
        [JsonPropertyName("SessionTimeout")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public TimeSpan SessionTimeout { get; set; } = default!;

        /// <summary>
        /// Optional parameter to configure if the generated metadata stream should contain shape information as polygon.
        /// </summary>
        [JsonPropertyName("ShapePolygon")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? ShapePolygon { get; set; } = default;

        /// <summary>
        /// Token that uniquely references this configuration. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Number of internal references currently using this configuration. This informational parameter is read-only. Deprecated for Media2 Service.
        /// </summary>
        [JsonPropertyName("UseCount")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int UseCount { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Multicast is null)
            {
                throw new ArgumentNullException("Multicast field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Multicast is null)
            {
                throw new ArgumentNullException("Multicast field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
