/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public partial class IrCutFilterAutoAdjustment : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Adjusts boundary exposure level for toggling Ir cut filter to on/off specified with unitless normalized value from +1.0 to -1.0. Zero is default and -1.0 is the darkest adjustment (Unitless).
        /// </summary>
        [JsonPropertyName("BoundaryOffset")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? BoundaryOffset { get; set; } = default;

        /// <summary>
        /// Specifies which boundaries to automatically toggle Ir cut filter following parameters are applied to. Its options shall be chosen from tt:IrCutFilterAutoBoundaryType.
        /// </summary>
        [JsonPropertyName("BoundaryType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string BoundaryType { get; set; } = default!;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public IrCutFilterAutoAdjustmentExtension? Extension { get; set; } = default;

        /// <summary>
        /// Delay time of toggling Ir cut filter to on/off after crossing of the boundary exposure levels.
        /// </summary>
        [JsonPropertyName("ResponseTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public TimeSpan? ResponseTime { get; set; } = default;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (BoundaryType is null)
            {
                throw new ArgumentNullException("BoundaryType field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (BoundaryType is null)
            {
                throw new ArgumentNullException("BoundaryType field cannot be null");
            }
        }
    }
}
