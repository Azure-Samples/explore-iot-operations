/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace PtzClient.Ptz
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using PtzClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Ptzspaces : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
        /// </summary>
        [JsonPropertyName("AbsolutePanTiltPositionSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space2ddescription> AbsolutePanTiltPositionSpace { get; set; } = default!;

        /// <summary>
        /// The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
        /// </summary>
        [JsonPropertyName("AbsoluteZoomPositionSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space1ddescription> AbsoluteZoomPositionSpace { get; set; } = default!;

        /// <summary>
        /// The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
        /// </summary>
        [JsonPropertyName("ContinuousPanTiltVelocitySpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space2ddescription> ContinuousPanTiltVelocitySpace { get; set; } = default!;

        /// <summary>
        /// The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. Instead, the range should be defined as a range of the PTZ unitâ€™s speed normalized to the range -1 to 1, where a positive velocity would map to clockwise rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
        /// </summary>
        [JsonPropertyName("ContinuousZoomVelocitySpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space1ddescription> ContinuousZoomVelocitySpace { get; set; } = default!;

        /// <summary>
        /// The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt movement is represented by a single non-negative scalar value.
        /// </summary>
        [JsonPropertyName("PanTiltSpeedSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space1ddescription> PanTiltSpeedSpace { get; set; } = default!;

        /// <summary>
        /// The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
        /// </summary>
        [JsonPropertyName("RelativePanTiltTranslationSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space2ddescription> RelativePanTiltTranslationSpace { get; set; } = default!;

        /// <summary>
        /// The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele).
        /// </summary>
        [JsonPropertyName("RelativeZoomTranslationSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space1ddescription> RelativeZoomTranslationSpace { get; set; } = default!;

        /// <summary>
        /// The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information.
        /// </summary>
        [JsonPropertyName("ZoomSpeedSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<Space1ddescription> ZoomSpeedSpace { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (AbsolutePanTiltPositionSpace is null)
            {
                throw new ArgumentNullException("AbsolutePanTiltPositionSpace field cannot be null");
            }
            if (AbsoluteZoomPositionSpace is null)
            {
                throw new ArgumentNullException("AbsoluteZoomPositionSpace field cannot be null");
            }
            if (ContinuousPanTiltVelocitySpace is null)
            {
                throw new ArgumentNullException("ContinuousPanTiltVelocitySpace field cannot be null");
            }
            if (ContinuousZoomVelocitySpace is null)
            {
                throw new ArgumentNullException("ContinuousZoomVelocitySpace field cannot be null");
            }
            if (PanTiltSpeedSpace is null)
            {
                throw new ArgumentNullException("PanTiltSpeedSpace field cannot be null");
            }
            if (RelativePanTiltTranslationSpace is null)
            {
                throw new ArgumentNullException("RelativePanTiltTranslationSpace field cannot be null");
            }
            if (RelativeZoomTranslationSpace is null)
            {
                throw new ArgumentNullException("RelativeZoomTranslationSpace field cannot be null");
            }
            if (ZoomSpeedSpace is null)
            {
                throw new ArgumentNullException("ZoomSpeedSpace field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (AbsolutePanTiltPositionSpace is null)
            {
                throw new ArgumentNullException("AbsolutePanTiltPositionSpace field cannot be null");
            }
            if (AbsoluteZoomPositionSpace is null)
            {
                throw new ArgumentNullException("AbsoluteZoomPositionSpace field cannot be null");
            }
            if (ContinuousPanTiltVelocitySpace is null)
            {
                throw new ArgumentNullException("ContinuousPanTiltVelocitySpace field cannot be null");
            }
            if (ContinuousZoomVelocitySpace is null)
            {
                throw new ArgumentNullException("ContinuousZoomVelocitySpace field cannot be null");
            }
            if (PanTiltSpeedSpace is null)
            {
                throw new ArgumentNullException("PanTiltSpeedSpace field cannot be null");
            }
            if (RelativePanTiltTranslationSpace is null)
            {
                throw new ArgumentNullException("RelativePanTiltTranslationSpace field cannot be null");
            }
            if (RelativeZoomTranslationSpace is null)
            {
                throw new ArgumentNullException("RelativeZoomTranslationSpace field cannot be null");
            }
            if (ZoomSpeedSpace is null)
            {
                throw new ArgumentNullException("ZoomSpeedSpace field cannot be null");
            }
        }
    }
}
