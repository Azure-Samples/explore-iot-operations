/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace PtzClient.Ptz
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using PtzClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class PtzconfigurationOptions : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public PtzconfigurationOptions2? Extension { get; set; } = default;

        /// <summary>
        /// Supported options for PT Direction Control.
        /// </summary>
        [JsonPropertyName("PTControlDirection")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public PtcontrolDirectionOptions? PtcontrolDirection { get; set; } = default;

        /// <summary>
        /// The list of acceleration ramps supported by the device. The smallest acceleration value corresponds to the minimal index, the highest acceleration corresponds to the maximum index.
        /// </summary>
        [JsonPropertyName("PTZRamps")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public List<int>? Ptzramps { get; set; } = default;

        /// <summary>
        /// A timeout Range within which Timeouts are accepted by the PTZ Node.
        /// </summary>
        [JsonPropertyName("PTZTimeout")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public DurationRange Ptztimeout { get; set; } = default!;

        /// <summary>
        /// A list of supported coordinate systems including their range limitations.
        /// </summary>
        [JsonPropertyName("Spaces")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public Ptzspaces Spaces { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Ptztimeout is null)
            {
                throw new ArgumentNullException("PTZTimeout field cannot be null");
            }
            if (Spaces is null)
            {
                throw new ArgumentNullException("Spaces field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Ptztimeout is null)
            {
                throw new ArgumentNullException("PTZTimeout field cannot be null");
            }
            if (Spaces is null)
            {
                throw new ArgumentNullException("Spaces field cannot be null");
            }
        }
    }
}
