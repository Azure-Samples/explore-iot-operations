/* Code generated by Azure.Iot.Operations.ProtocolCompiler; DO NOT EDIT. */

#nullable enable

namespace PTZ.dtmi_onvif_ptz__1
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using PTZ;

    [ModelId("dtmi:onvif:ptz;1")]
    [CommandTopic("{ex:namespace}/mrpc/{ex:asset}/{commandName}")]
    [ServiceGroupId("MyServiceGroup")]
    public static partial class Ptz
    {
        public abstract partial class Service : IAsyncDisposable
        {
            private readonly GetNodesCommandExecutor getNodesCommandExecutor;
            private readonly GetNodeCommandExecutor getNodeCommandExecutor;
            private readonly AbsoluteMoveCommandExecutor absoluteMoveCommandExecutor;
            private readonly RelativeMoveCommandExecutor relativeMoveCommandExecutor;
            private readonly ContinuousMoveCommandExecutor continuousMoveCommandExecutor;
            private readonly StopCommandExecutor stopCommandExecutor;
            private readonly GetConfigurationsCommandExecutor getConfigurationsCommandExecutor;
            private readonly GetConfigurationCommandExecutor getConfigurationCommandExecutor;
            private readonly GetConfigurationOptionsCommandExecutor getConfigurationOptionsCommandExecutor;
            private readonly SetConfigurationCommandExecutor setConfigurationCommandExecutor;
            private readonly GetStatusCommandExecutor getStatusCommandExecutor;
            private readonly GetPresetsCommandExecutor getPresetsCommandExecutor;
            private readonly SetPresetCommandExecutor setPresetCommandExecutor;
            private readonly RemovePresetCommandExecutor removePresetCommandExecutor;
            private readonly GotoPresetCommandExecutor gotoPresetCommandExecutor;
            private readonly GotoHomePositionCommandExecutor gotoHomePositionCommandExecutor;
            private readonly SetHomePositionCommandExecutor setHomePositionCommandExecutor;
            private readonly SendAuxiliaryCommandCommandExecutor sendAuxiliaryCommandCommandExecutor;

            public Service(IMqttPubSubClient mqttClient)
            {
                this.CustomTopicTokenMap = new();

                this.getNodesCommandExecutor = new GetNodesCommandExecutor(mqttClient) { OnCommandReceived = GetNodes_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getNodeCommandExecutor = new GetNodeCommandExecutor(mqttClient) { OnCommandReceived = GetNode_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.absoluteMoveCommandExecutor = new AbsoluteMoveCommandExecutor(mqttClient) { OnCommandReceived = AbsoluteMove_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.relativeMoveCommandExecutor = new RelativeMoveCommandExecutor(mqttClient) { OnCommandReceived = RelativeMove_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.continuousMoveCommandExecutor = new ContinuousMoveCommandExecutor(mqttClient) { OnCommandReceived = ContinuousMove_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.stopCommandExecutor = new StopCommandExecutor(mqttClient) { OnCommandReceived = Stop_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getConfigurationsCommandExecutor = new GetConfigurationsCommandExecutor(mqttClient) { OnCommandReceived = GetConfigurations_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getConfigurationCommandExecutor = new GetConfigurationCommandExecutor(mqttClient) { OnCommandReceived = GetConfiguration_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getConfigurationOptionsCommandExecutor = new GetConfigurationOptionsCommandExecutor(mqttClient) { OnCommandReceived = GetConfigurationOptions_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setConfigurationCommandExecutor = new SetConfigurationCommandExecutor(mqttClient) { OnCommandReceived = SetConfiguration_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getStatusCommandExecutor = new GetStatusCommandExecutor(mqttClient) { OnCommandReceived = GetStatus_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getPresetsCommandExecutor = new GetPresetsCommandExecutor(mqttClient) { OnCommandReceived = GetPresets_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setPresetCommandExecutor = new SetPresetCommandExecutor(mqttClient) { OnCommandReceived = SetPreset_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removePresetCommandExecutor = new RemovePresetCommandExecutor(mqttClient) { OnCommandReceived = RemovePreset_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.gotoPresetCommandExecutor = new GotoPresetCommandExecutor(mqttClient) { OnCommandReceived = GotoPreset_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.gotoHomePositionCommandExecutor = new GotoHomePositionCommandExecutor(mqttClient) { OnCommandReceived = GotoHomePosition_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setHomePositionCommandExecutor = new SetHomePositionCommandExecutor(mqttClient) { OnCommandReceived = SetHomePosition_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.sendAuxiliaryCommandCommandExecutor = new SendAuxiliaryCommandCommandExecutor(mqttClient) { OnCommandReceived = SendAuxiliaryCommand_Int, CustomTopicTokenMap = this.CustomTopicTokenMap };
            }

            public GetNodesCommandExecutor GetNodesCommandExecutor { get => this.getNodesCommandExecutor; }
            public GetNodeCommandExecutor GetNodeCommandExecutor { get => this.getNodeCommandExecutor; }
            public AbsoluteMoveCommandExecutor AbsoluteMoveCommandExecutor { get => this.absoluteMoveCommandExecutor; }
            public RelativeMoveCommandExecutor RelativeMoveCommandExecutor { get => this.relativeMoveCommandExecutor; }
            public ContinuousMoveCommandExecutor ContinuousMoveCommandExecutor { get => this.continuousMoveCommandExecutor; }
            public StopCommandExecutor StopCommandExecutor { get => this.stopCommandExecutor; }
            public GetConfigurationsCommandExecutor GetConfigurationsCommandExecutor { get => this.getConfigurationsCommandExecutor; }
            public GetConfigurationCommandExecutor GetConfigurationCommandExecutor { get => this.getConfigurationCommandExecutor; }
            public GetConfigurationOptionsCommandExecutor GetConfigurationOptionsCommandExecutor { get => this.getConfigurationOptionsCommandExecutor; }
            public SetConfigurationCommandExecutor SetConfigurationCommandExecutor { get => this.setConfigurationCommandExecutor; }
            public GetStatusCommandExecutor GetStatusCommandExecutor { get => this.getStatusCommandExecutor; }
            public GetPresetsCommandExecutor GetPresetsCommandExecutor { get => this.getPresetsCommandExecutor; }
            public SetPresetCommandExecutor SetPresetCommandExecutor { get => this.setPresetCommandExecutor; }
            public RemovePresetCommandExecutor RemovePresetCommandExecutor { get => this.removePresetCommandExecutor; }
            public GotoPresetCommandExecutor GotoPresetCommandExecutor { get => this.gotoPresetCommandExecutor; }
            public GotoHomePositionCommandExecutor GotoHomePositionCommandExecutor { get => this.gotoHomePositionCommandExecutor; }
            public SetHomePositionCommandExecutor SetHomePositionCommandExecutor { get => this.setHomePositionCommandExecutor; }
            public SendAuxiliaryCommandCommandExecutor SendAuxiliaryCommandCommandExecutor { get => this.sendAuxiliaryCommandCommandExecutor; }

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

            public abstract Task<ExtendedResponse<GetNodesResponsePayload>> GetNodesAsync(CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetNodeResponsePayload>> GetNodeAsync(GetNodeRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> AbsoluteMoveAsync(AbsoluteMoveRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> RelativeMoveAsync(RelativeMoveRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> ContinuousMoveAsync(ContinuousMoveRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> StopAsync(StopRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetConfigurationsResponsePayload>> GetConfigurationsAsync(CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetConfigurationResponsePayload>> GetConfigurationAsync(GetConfigurationRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetConfigurationOptionsResponsePayload>> GetConfigurationOptionsAsync(GetConfigurationOptionsRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> SetConfigurationAsync(SetConfigurationRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetStatusResponsePayload>> GetStatusAsync(GetStatusRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetPresetsResponsePayload>> GetPresetsAsync(GetPresetsRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<SetPresetResponsePayload>> SetPresetAsync(SetPresetRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> RemovePresetAsync(RemovePresetRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> GotoPresetAsync(GotoPresetRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> GotoHomePositionAsync(GotoHomePositionRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<CommandResponseMetadata?> SetHomePositionAsync(SetHomePositionRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<SendAuxiliaryCommandResponsePayload>> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public async Task StartAsync(int? preferredDispatchConcurrency = null, CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
                    this.getNodesCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getNodeCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.absoluteMoveCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.relativeMoveCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.continuousMoveCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.stopCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getConfigurationsCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getConfigurationCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getConfigurationOptionsCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.setConfigurationCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getStatusCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getPresetsCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.setPresetCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.removePresetCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.gotoPresetCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.gotoHomePositionCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.setHomePositionCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.sendAuxiliaryCommandCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken)).ConfigureAwait(false);
            }

            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
                    this.getNodesCommandExecutor.StopAsync(cancellationToken),
                    this.getNodeCommandExecutor.StopAsync(cancellationToken),
                    this.absoluteMoveCommandExecutor.StopAsync(cancellationToken),
                    this.relativeMoveCommandExecutor.StopAsync(cancellationToken),
                    this.continuousMoveCommandExecutor.StopAsync(cancellationToken),
                    this.stopCommandExecutor.StopAsync(cancellationToken),
                    this.getConfigurationsCommandExecutor.StopAsync(cancellationToken),
                    this.getConfigurationCommandExecutor.StopAsync(cancellationToken),
                    this.getConfigurationOptionsCommandExecutor.StopAsync(cancellationToken),
                    this.setConfigurationCommandExecutor.StopAsync(cancellationToken),
                    this.getStatusCommandExecutor.StopAsync(cancellationToken),
                    this.getPresetsCommandExecutor.StopAsync(cancellationToken),
                    this.setPresetCommandExecutor.StopAsync(cancellationToken),
                    this.removePresetCommandExecutor.StopAsync(cancellationToken),
                    this.gotoPresetCommandExecutor.StopAsync(cancellationToken),
                    this.gotoHomePositionCommandExecutor.StopAsync(cancellationToken),
                    this.setHomePositionCommandExecutor.StopAsync(cancellationToken),
                    this.sendAuxiliaryCommandCommandExecutor.StopAsync(cancellationToken)).ConfigureAwait(false);
            }
            private async Task<ExtendedResponse<GetNodesResponsePayload>> GetNodes_Int(ExtendedRequest<EmptyJson> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetNodesResponsePayload> extended = await this.GetNodesAsync(req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetNodesResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<GetNodeResponsePayload>> GetNode_Int(ExtendedRequest<GetNodeRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetNodeResponsePayload> extended = await this.GetNodeAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetNodeResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> AbsoluteMove_Int(ExtendedRequest<AbsoluteMoveRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.AbsoluteMoveAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> RelativeMove_Int(ExtendedRequest<RelativeMoveRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.RelativeMoveAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> ContinuousMove_Int(ExtendedRequest<ContinuousMoveRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.ContinuousMoveAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> Stop_Int(ExtendedRequest<StopRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.StopAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<GetConfigurationsResponsePayload>> GetConfigurations_Int(ExtendedRequest<EmptyJson> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetConfigurationsResponsePayload> extended = await this.GetConfigurationsAsync(req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetConfigurationsResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<GetConfigurationResponsePayload>> GetConfiguration_Int(ExtendedRequest<GetConfigurationRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetConfigurationResponsePayload> extended = await this.GetConfigurationAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetConfigurationResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<GetConfigurationOptionsResponsePayload>> GetConfigurationOptions_Int(ExtendedRequest<GetConfigurationOptionsRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetConfigurationOptionsResponsePayload> extended = await this.GetConfigurationOptionsAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetConfigurationOptionsResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> SetConfiguration_Int(ExtendedRequest<SetConfigurationRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.SetConfigurationAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<GetStatusResponsePayload>> GetStatus_Int(ExtendedRequest<GetStatusRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetStatusResponsePayload> extended = await this.GetStatusAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetStatusResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<GetPresetsResponsePayload>> GetPresets_Int(ExtendedRequest<GetPresetsRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<GetPresetsResponsePayload> extended = await this.GetPresetsAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<GetPresetsResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<SetPresetResponsePayload>> SetPreset_Int(ExtendedRequest<SetPresetRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<SetPresetResponsePayload> extended = await this.SetPresetAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<SetPresetResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> RemovePreset_Int(ExtendedRequest<RemovePresetRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.RemovePresetAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> GotoPreset_Int(ExtendedRequest<GotoPresetRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.GotoPresetAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> GotoHomePosition_Int(ExtendedRequest<GotoHomePositionRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.GotoHomePositionAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<EmptyJson>> SetHomePosition_Int(ExtendedRequest<SetHomePositionRequestPayload> req, CancellationToken cancellationToken)
            {
                CommandResponseMetadata? responseMetadata = await this.SetHomePositionAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<EmptyJson> { ResponseMetadata = responseMetadata };
            }
            private async Task<ExtendedResponse<SendAuxiliaryCommandResponsePayload>> SendAuxiliaryCommand_Int(ExtendedRequest<SendAuxiliaryCommandRequestPayload> req, CancellationToken cancellationToken)
            {
                ExtendedResponse<SendAuxiliaryCommandResponsePayload> extended = await this.SendAuxiliaryCommandAsync(req.Request!, req.RequestMetadata!, cancellationToken);
                return new ExtendedResponse<SendAuxiliaryCommandResponsePayload> { Response = extended.Response, ResponseMetadata = extended.ResponseMetadata };
            }

            public async ValueTask DisposeAsync()
            {
                await this.getNodesCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getNodeCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.absoluteMoveCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.relativeMoveCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.continuousMoveCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.stopCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getConfigurationsCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getConfigurationCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getConfigurationOptionsCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.setConfigurationCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getStatusCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getPresetsCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.setPresetCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.removePresetCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.gotoPresetCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.gotoHomePositionCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.setHomePositionCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.sendAuxiliaryCommandCommandExecutor.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.getNodesCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getNodeCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.absoluteMoveCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.relativeMoveCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.continuousMoveCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.stopCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getConfigurationsCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getConfigurationCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getConfigurationOptionsCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setConfigurationCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getStatusCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getPresetsCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setPresetCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removePresetCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.gotoPresetCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.gotoHomePositionCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setHomePositionCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.sendAuxiliaryCommandCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }

        public abstract partial class Client : IAsyncDisposable
        {
            private readonly GetNodesCommandInvoker getNodesCommandInvoker;
            private readonly GetNodeCommandInvoker getNodeCommandInvoker;
            private readonly AbsoluteMoveCommandInvoker absoluteMoveCommandInvoker;
            private readonly RelativeMoveCommandInvoker relativeMoveCommandInvoker;
            private readonly ContinuousMoveCommandInvoker continuousMoveCommandInvoker;
            private readonly StopCommandInvoker stopCommandInvoker;
            private readonly GetConfigurationsCommandInvoker getConfigurationsCommandInvoker;
            private readonly GetConfigurationCommandInvoker getConfigurationCommandInvoker;
            private readonly GetConfigurationOptionsCommandInvoker getConfigurationOptionsCommandInvoker;
            private readonly SetConfigurationCommandInvoker setConfigurationCommandInvoker;
            private readonly GetStatusCommandInvoker getStatusCommandInvoker;
            private readonly GetPresetsCommandInvoker getPresetsCommandInvoker;
            private readonly SetPresetCommandInvoker setPresetCommandInvoker;
            private readonly RemovePresetCommandInvoker removePresetCommandInvoker;
            private readonly GotoPresetCommandInvoker gotoPresetCommandInvoker;
            private readonly GotoHomePositionCommandInvoker gotoHomePositionCommandInvoker;
            private readonly SetHomePositionCommandInvoker setHomePositionCommandInvoker;
            private readonly SendAuxiliaryCommandCommandInvoker sendAuxiliaryCommandCommandInvoker;

            public Client(IMqttPubSubClient mqttClient)
            {
                this.CustomTopicTokenMap = new();

                this.getNodesCommandInvoker = new GetNodesCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getNodeCommandInvoker = new GetNodeCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.absoluteMoveCommandInvoker = new AbsoluteMoveCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.relativeMoveCommandInvoker = new RelativeMoveCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.continuousMoveCommandInvoker = new ContinuousMoveCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.stopCommandInvoker = new StopCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getConfigurationsCommandInvoker = new GetConfigurationsCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getConfigurationCommandInvoker = new GetConfigurationCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getConfigurationOptionsCommandInvoker = new GetConfigurationOptionsCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setConfigurationCommandInvoker = new SetConfigurationCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getStatusCommandInvoker = new GetStatusCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.getPresetsCommandInvoker = new GetPresetsCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setPresetCommandInvoker = new SetPresetCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.removePresetCommandInvoker = new RemovePresetCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.gotoPresetCommandInvoker = new GotoPresetCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.gotoHomePositionCommandInvoker = new GotoHomePositionCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.setHomePositionCommandInvoker = new SetHomePositionCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
                this.sendAuxiliaryCommandCommandInvoker = new SendAuxiliaryCommandCommandInvoker(mqttClient) { CustomTopicTokenMap = this.CustomTopicTokenMap };
            }

            public GetNodesCommandInvoker GetNodesCommandInvoker { get => this.getNodesCommandInvoker; }
            public GetNodeCommandInvoker GetNodeCommandInvoker { get => this.getNodeCommandInvoker; }
            public AbsoluteMoveCommandInvoker AbsoluteMoveCommandInvoker { get => this.absoluteMoveCommandInvoker; }
            public RelativeMoveCommandInvoker RelativeMoveCommandInvoker { get => this.relativeMoveCommandInvoker; }
            public ContinuousMoveCommandInvoker ContinuousMoveCommandInvoker { get => this.continuousMoveCommandInvoker; }
            public StopCommandInvoker StopCommandInvoker { get => this.stopCommandInvoker; }
            public GetConfigurationsCommandInvoker GetConfigurationsCommandInvoker { get => this.getConfigurationsCommandInvoker; }
            public GetConfigurationCommandInvoker GetConfigurationCommandInvoker { get => this.getConfigurationCommandInvoker; }
            public GetConfigurationOptionsCommandInvoker GetConfigurationOptionsCommandInvoker { get => this.getConfigurationOptionsCommandInvoker; }
            public SetConfigurationCommandInvoker SetConfigurationCommandInvoker { get => this.setConfigurationCommandInvoker; }
            public GetStatusCommandInvoker GetStatusCommandInvoker { get => this.getStatusCommandInvoker; }
            public GetPresetsCommandInvoker GetPresetsCommandInvoker { get => this.getPresetsCommandInvoker; }
            public SetPresetCommandInvoker SetPresetCommandInvoker { get => this.setPresetCommandInvoker; }
            public RemovePresetCommandInvoker RemovePresetCommandInvoker { get => this.removePresetCommandInvoker; }
            public GotoPresetCommandInvoker GotoPresetCommandInvoker { get => this.gotoPresetCommandInvoker; }
            public GotoHomePositionCommandInvoker GotoHomePositionCommandInvoker { get => this.gotoHomePositionCommandInvoker; }
            public SetHomePositionCommandInvoker SetHomePositionCommandInvoker { get => this.setHomePositionCommandInvoker; }
            public SendAuxiliaryCommandCommandInvoker SendAuxiliaryCommandCommandInvoker { get => this.sendAuxiliaryCommandCommandInvoker; }

            public Dictionary<string, string> CustomTopicTokenMap { get; private init; }

            public RpcCallAsync<GetNodesResponsePayload> GetNodesAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetNodesResponsePayload>(this.getNodesCommandInvoker.InvokeCommandAsync("", new EmptyJson(), metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetNodeResponsePayload> GetNodeAsync(GetNodeRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetNodeResponsePayload>(this.getNodeCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> AbsoluteMoveAsync(AbsoluteMoveRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.absoluteMoveCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RelativeMoveAsync(RelativeMoveRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.relativeMoveCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> ContinuousMoveAsync(ContinuousMoveRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.continuousMoveCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> StopAsync(StopRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.stopCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetConfigurationsResponsePayload> GetConfigurationsAsync(CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetConfigurationsResponsePayload>(this.getConfigurationsCommandInvoker.InvokeCommandAsync("", new EmptyJson(), metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetConfigurationResponsePayload> GetConfigurationAsync(GetConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetConfigurationResponsePayload>(this.getConfigurationCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetConfigurationOptionsResponsePayload> GetConfigurationOptionsAsync(GetConfigurationOptionsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetConfigurationOptionsResponsePayload>(this.getConfigurationOptionsCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetConfigurationAsync(SetConfigurationRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.setConfigurationCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetStatusResponsePayload> GetStatusAsync(GetStatusRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetStatusResponsePayload>(this.getStatusCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<GetPresetsResponsePayload> GetPresetsAsync(GetPresetsRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<GetPresetsResponsePayload>(this.getPresetsCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<SetPresetResponsePayload> SetPresetAsync(SetPresetRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<SetPresetResponsePayload>(this.setPresetCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> RemovePresetAsync(RemovePresetRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.removePresetCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> GotoPresetAsync(GotoPresetRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.gotoPresetCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> GotoHomePositionAsync(GotoHomePositionRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.gotoHomePositionCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<EmptyJson> SetHomePositionAsync(SetHomePositionRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<EmptyJson>(this.setHomePositionCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public RpcCallAsync<SendAuxiliaryCommandResponsePayload> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequestPayload request, CommandRequestMetadata? requestMetadata = null, TimeSpan? commandTimeout = default, CancellationToken cancellationToken = default)
            {
                CommandRequestMetadata metadata = requestMetadata ?? new CommandRequestMetadata();
                return new RpcCallAsync<SendAuxiliaryCommandResponsePayload>(this.sendAuxiliaryCommandCommandInvoker.InvokeCommandAsync("", request, metadata, commandTimeout, cancellationToken), metadata.CorrelationId);
            }

            public async ValueTask DisposeAsync()
            {
                await this.getNodesCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getNodeCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.absoluteMoveCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.relativeMoveCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.continuousMoveCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.stopCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getConfigurationsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getConfigurationOptionsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setConfigurationCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getStatusCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.getPresetsCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setPresetCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.removePresetCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.gotoPresetCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.gotoHomePositionCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.setHomePositionCommandInvoker.DisposeAsync().ConfigureAwait(false);
                await this.sendAuxiliaryCommandCommandInvoker.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.getNodesCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getNodeCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.absoluteMoveCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.relativeMoveCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.continuousMoveCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.stopCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getConfigurationsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getConfigurationOptionsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setConfigurationCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getStatusCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getPresetsCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setPresetCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.removePresetCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.gotoPresetCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.gotoHomePositionCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setHomePositionCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
                await this.sendAuxiliaryCommandCommandInvoker.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }
    }
}
