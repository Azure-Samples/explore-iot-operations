/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Config : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// The Type attribute specifies the type of rule and shall be equal to value of one of Name attributes of ConfigDescription elements returned by GetSupportedRules and GetSupportedAnalyticsModules command.
        /// </summary>
        [JsonPropertyName("ConfigType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string ConfigType { get; set; } = default!;

        /// <summary>
        /// Name of the configuration.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// List of configuration parameters as defined in the corresponding description.
        /// </summary>
        [JsonPropertyName("Parameters")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public ItemList Parameters { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (ConfigType is null)
            {
                throw new ArgumentNullException("ConfigType field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Parameters is null)
            {
                throw new ArgumentNullException("Parameters field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (ConfigType is null)
            {
                throw new ArgumentNullException("ConfigType field cannot be null");
            }
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Parameters is null)
            {
                throw new ArgumentNullException("Parameters field cannot be null");
            }
        }
    }
}
