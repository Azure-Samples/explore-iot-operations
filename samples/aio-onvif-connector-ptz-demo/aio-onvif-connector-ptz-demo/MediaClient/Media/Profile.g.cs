/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Profile : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// Optional configuration of the Audio encoder.
        /// </summary>
        [JsonPropertyName("AudioEncoderConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public AudioEncoderConfiguration? AudioEncoderConfiguration { get; set; } = default;

        /// <summary>
        /// Optional configuration of the Audio input.
        /// </summary>
        [JsonPropertyName("AudioSourceConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public AudioSourceConfiguration? AudioSourceConfiguration { get; set; } = default;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ProfileExtension? Extension { get; set; } = default;

        /// <summary>
        /// A value of true signals that the profile cannot be deleted. Default is false.
        /// </summary>
        [JsonPropertyName("fixed")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? Fixed { get; set; } = default;

        /// <summary>
        /// Optional configuration of the metadata stream.
        /// </summary>
        [JsonPropertyName("MetadataConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public MetadataConfiguration? MetadataConfiguration { get; set; } = default;

        /// <summary>
        /// User readable name of the profile.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Optional configuration of the pan tilt zoom unit.
        /// </summary>
        [JsonPropertyName("PTZConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Ptzconfiguration? Ptzconfiguration { get; set; } = default;

        /// <summary>
        /// Unique identifier of the profile.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Optional configuration of the video analytics module and rule engine.
        /// </summary>
        [JsonPropertyName("VideoAnalyticsConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoAnalyticsConfiguration? VideoAnalyticsConfiguration { get; set; } = default;

        /// <summary>
        /// Optional configuration of the Video encoder.
        /// </summary>
        [JsonPropertyName("VideoEncoderConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoEncoderConfiguration? VideoEncoderConfiguration { get; set; } = default;

        /// <summary>
        /// Optional configuration of the Video input.
        /// </summary>
        [JsonPropertyName("VideoSourceConfiguration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public VideoSourceConfiguration? VideoSourceConfiguration { get; set; } = default;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
