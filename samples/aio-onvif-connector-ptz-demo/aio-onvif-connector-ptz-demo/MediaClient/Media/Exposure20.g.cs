/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace MediaClient.Media
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using MediaClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Exposure20
    {
        /// <summary>
        /// The fixed exposure time used by the image sensor (Î¼s).
        /// </summary>
        [JsonPropertyName("ExposureTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? ExposureTime { get; set; } = default;

        /// <summary>
        /// The fixed gain used by the image sensor (dB).
        /// </summary>
        [JsonPropertyName("Gain")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? Gain { get; set; } = default;

        /// <summary>
        /// The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
        /// </summary>
        [JsonPropertyName("Iris")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? Iris { get; set; } = default;

        /// <summary>
        /// Maximum value of exposure time range allowed to be used by the algorithm.
        /// </summary>
        [JsonPropertyName("MaxExposureTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? MaxExposureTime { get; set; } = default;

        /// <summary>
        /// Maximum value of the sensor gain range that is allowed to be used by the algorithm.
        /// </summary>
        [JsonPropertyName("MaxGain")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? MaxGain { get; set; } = default;

        /// <summary>
        /// Maximum value of the iris range allowed to be used by the algorithm.
        /// </summary>
        [JsonPropertyName("MaxIris")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? MaxIris { get; set; } = default;

        /// <summary>
        /// Minimum value of exposure time range allowed to be used by the algorithm.
        /// </summary>
        [JsonPropertyName("MinExposureTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? MinExposureTime { get; set; } = default;

        /// <summary>
        /// Minimum value of the sensor gain range that is allowed to be used by the algorithm.
        /// </summary>
        [JsonPropertyName("MinGain")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? MinGain { get; set; } = default;

        /// <summary>
        /// Minimum value of the iris range allowed to be used by the algorithm.
        /// </summary>
        [JsonPropertyName("MinIris")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public float? MinIris { get; set; } = default;

        /// <summary>
        /// Exposure Mode
        /// </summary>
        [JsonPropertyName("Mode")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public ExposureMode Mode { get; set; } = default!;

        /// <summary>
        /// The exposure priority mode (low noise/framerate).
        /// </summary>
        [JsonPropertyName("Priority")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ExposurePriority? Priority { get; set; } = default;

        /// <summary>
        /// The 'Window' Field.
        /// </summary>
        [JsonPropertyName("Window")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Rectangle? Window { get; set; } = default;

    }
}
