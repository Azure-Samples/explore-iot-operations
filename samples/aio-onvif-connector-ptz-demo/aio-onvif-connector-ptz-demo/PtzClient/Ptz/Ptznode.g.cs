/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace PtzClient.Ptz
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using PtzClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Ptznode : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// A list of supported Auxiliary commands. If the list is not empty, the Auxiliary Operations MUST be available for this PTZ Node.
        /// </summary>
        [JsonPropertyName("AuxiliaryCommands")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public List<AuxiliaryData> AuxiliaryCommands { get; set; } = default!;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public PtznodeExtension? Extension { get; set; } = default;

        /// <summary>
        /// Indication whether the HomePosition of a Node is fixed or it can be changed via the SetHomePosition command.
        /// </summary>
        [JsonPropertyName("FixedHomePosition")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? FixedHomePosition { get; set; } = default;

        /// <summary>
        /// Indication whether the Node supports the geo-referenced move command.
        /// </summary>
        [JsonPropertyName("GeoMove")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public bool? GeoMove { get; set; } = default;

        /// <summary>
        /// A boolean operator specifying the availability of a home position. If set to true, the Home Position Operations MUST be available for this PTZ Node.
        /// </summary>
        [JsonPropertyName("HomeSupported")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public bool HomeSupported { get; set; } = default!;

        /// <summary>
        /// All preset operations MUST be available for this PTZ Node if one preset is supported.
        /// </summary>
        [JsonPropertyName("MaximumNumberOfPresets")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int MaximumNumberOfPresets { get; set; } = default!;

        /// <summary>
        /// A unique identifier that is used to reference PTZ Nodes.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? Name { get; set; } = default;

        /// <summary>
        /// A list of Coordinate Systems available for the PTZ Node. For each Coordinate System, the PTZ Node MUST specify its allowed range.
        /// </summary>
        [JsonPropertyName("SupportedPTZSpaces")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public Ptzspaces SupportedPtzspaces { get; set; } = default!;

        /// <summary>
        /// Unique identifier referencing the physical entity.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (AuxiliaryCommands is null)
            {
                throw new ArgumentNullException("AuxiliaryCommands field cannot be null");
            }
            if (SupportedPtzspaces is null)
            {
                throw new ArgumentNullException("SupportedPTZSpaces field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (AuxiliaryCommands is null)
            {
                throw new ArgumentNullException("AuxiliaryCommands field cannot be null");
            }
            if (SupportedPtzspaces is null)
            {
                throw new ArgumentNullException("SupportedPTZSpaces field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
