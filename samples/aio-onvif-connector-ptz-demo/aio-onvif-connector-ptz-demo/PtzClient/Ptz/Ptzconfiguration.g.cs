/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.9.0.0; DO NOT EDIT. */

#nullable enable

namespace PtzClient.Ptz
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json.Serialization;
    using PtzClient;

    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.9.0.0")]
    public partial class Ptzconfiguration : IJsonOnDeserialized, IJsonOnSerializing
    {
        /// <summary>
        /// If the PTZ Node supports absolute Pan/Tilt movements, it shall specify one Absolute Pan/Tilt Position Space as default.
        /// </summary>
        [JsonPropertyName("DefaultAbsolutePantTiltPositionSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? DefaultAbsolutePantTiltPositionSpace { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports absolute zoom movements, it shall specify one Absolute Zoom Position Space as default.
        /// </summary>
        [JsonPropertyName("DefaultAbsoluteZoomPositionSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? DefaultAbsoluteZoomPositionSpace { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports continuous Pan/Tilt movements, it shall specify one Continuous Pan/Tilt Velocity Space as default.
        /// </summary>
        [JsonPropertyName("DefaultContinuousPanTiltVelocitySpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? DefaultContinuousPanTiltVelocitySpace { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports continuous zoom movements, it shall specify one Continuous Zoom Velocity Space as default.
        /// </summary>
        [JsonPropertyName("DefaultContinuousZoomVelocitySpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? DefaultContinuousZoomVelocitySpace { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports absolute or relative PTZ movements, it shall specify corresponding default Pan/Tilt and Zoom speeds.
        /// </summary>
        [JsonPropertyName("DefaultPTZSpeed")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Ptzspeed? DefaultPtzspeed { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports continuous movements, it shall specify a default timeout, after which the movement stops.
        /// </summary>
        [JsonPropertyName("DefaultPTZTimeout")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public TimeSpan? DefaultPtztimeout { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports relative Pan/Tilt movements, it shall specify one RelativePan/Tilt Translation Space as default.
        /// </summary>
        [JsonPropertyName("DefaultRelativePanTiltTranslationSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? DefaultRelativePanTiltTranslationSpace { get; set; } = default;

        /// <summary>
        /// If the PTZ Node supports relative zoom movements, it shall specify one Relative Zoom Translation Space as default.
        /// </summary>
        [JsonPropertyName("DefaultRelativeZoomTranslationSpace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? DefaultRelativeZoomTranslationSpace { get; set; } = default;

        /// <summary>
        /// The 'Extension' Field.
        /// </summary>
        [JsonPropertyName("Extension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public PtzconfigurationExtension? Extension { get; set; } = default;

        /// <summary>
        /// The optional acceleration ramp used by the device when moving.
        /// </summary>
        [JsonPropertyName("MoveRamp")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? MoveRamp { get; set; } = default;

        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("Name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A mandatory reference to the PTZ Node that the PTZ Configuration belongs to.
        /// </summary>
        [JsonPropertyName("NodeToken")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string NodeToken { get; set; } = default!;

        /// <summary>
        /// The Pan/Tilt limits element should be present for a PTZ Node that supports an absolute Pan/Tilt. If the element is present it signals the support for configurable Pan/Tilt limits. If limits are enabled, the Pan/Tilt movements shall always stay within the specified range. The Pan/Tilt limits are disabled by setting the limits to â€“INF or +INF.
        /// </summary>
        [JsonPropertyName("PanTiltLimits")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public PanTiltLimits? PanTiltLimits { get; set; } = default;

        /// <summary>
        /// The optional acceleration ramp used by the device when recalling presets.
        /// </summary>
        [JsonPropertyName("PresetRamp")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? PresetRamp { get; set; } = default;

        /// <summary>
        /// The optional acceleration ramp used by the device when executing PresetTours.
        /// </summary>
        [JsonPropertyName("PresetTourRamp")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? PresetTourRamp { get; set; } = default;

        /// <summary>
        /// Token that uniquely references this configuration. Length up to 64 characters.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public string Token { get; set; } = default!;

        /// <summary>
        /// Number of internal references currently using this configuration. This informational parameter is read-only. Deprecated for Media2 Service.
        /// </summary>
        [JsonPropertyName("UseCount")]
        [JsonIgnore(Condition = JsonIgnoreCondition.Never)]
        [JsonRequired]
        public int UseCount { get; set; } = default!;

        /// <summary>
        /// The Zoom limits element should be present for a PTZ Node that supports absolute zoom. If the element is present it signals the supports for configurable Zoom limits. If limits are enabled the zoom movements shall always stay within the specified range. The Zoom limits are disabled by settings the limits to -INF and +INF.
        /// </summary>
        [JsonPropertyName("ZoomLimits")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public ZoomLimits? ZoomLimits { get; set; } = default;

        void IJsonOnDeserialized.OnDeserialized()
        {
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (NodeToken is null)
            {
                throw new ArgumentNullException("NodeToken field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }

        void IJsonOnSerializing.OnSerializing()
        {
            if (Name is null)
            {
                throw new ArgumentNullException("Name field cannot be null");
            }
            if (NodeToken is null)
            {
                throw new ArgumentNullException("NodeToken field cannot be null");
            }
            if (Token is null)
            {
                throw new ArgumentNullException("token field cannot be null");
            }
        }
    }
}
