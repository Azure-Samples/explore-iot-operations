openapi: 3.0.3
info:
  title: IoT MQ Custom Authentication API
  description: |-
    This is the HTTP API used for custom authentication. Custom authentication allows you to extend client authentication beyond the provided authentication methods. With custom authentication, the IoT MQ broker will forward the credentials of connecting clients to an external custom authentication server. The custom authentication server will decide whether to accept clients and determine each client's authorization attributes.

    The IoT MQ broker will make requests to the custom authentication server with the formats specified below. Likewise, the custom authentication server must respond with the specified response format.

    This API is currently in preview, and may change before GA.
  version: preview
servers:
  - url: https://custom-auth-endpoint/
    description: User-specified endpoint
tags:
  - name: Custom Authentication API
    description: Authenticate a connecting client
paths:
  /:
    post:
      tags:
        - Custom Authentication API
      summary: Authenticate client
      operationId: authClient
      description: |-
        This request from the IoT MQ broker to the custom authentication server forwards the connecting client's credentials to the custom authentication server. The custom authentication server must then use the provided information to accept or reject the client.
      requestBody:
        description: |-
          Request from the IoT MQ broker to the custom authentication server. The request body contains the information from either an MQTT CONNECT or AUTH packet.

          AUTH packets are only applicable to MQTT v5 clients.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/AuthRequest'
              - $ref: '#/components/schemas/ConnectRequest'
            examples:
              connectExample:
                summary: MQTT CONNECT example
                description: Example information from an MQTT CONNECT packet
                value:
                  type: connect
                  username: username
                  password: cGFzc3dvcmQ=
                  certs: "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----"
              authExample:
                summary: MQTT AUTH example (MQTT v5 only)
                description: Example information from an MQTT AUTH packet (MQTT v5 only)
                value:
                  type: auth
      responses:
        200:
          description: Authentication granted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPassResponse'
        400:
          description: Bad request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Authentication denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthFailResponse'
        405:
          description: Method not allowed (the request used a method other than POST)
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    AuthRequest:
      type: object
      description: Information from an MQTT AUTH packet (MQTT v5 only)
      properties:
        type:
          type: string
          description: The MQTT packet type that provided the information in this request
          enum:
          - auth
      required:
      - type
    ConnectRequest:
      type: object
      description: Information from an MQTT CONNECT packet
      properties:
        type:
          type: string
          description: The MQTT packet type that provided the information in this request
          enum:
          - connect
        username:
          type: string
          description: The username provided in the MQTT CONNECT packet
        password:
          type: string
          format: base64-encoded
          description: The base64-encoded password provided in the MQTT CONNECT packet
        certs:
          type: string
          format: PEM-encoded certificate chain
          description: Client certificates provided during the TLS handshake
      required:
      - type
    AuthPassResponse:
      type: object
      description: |-
        Credential expiry time and authorization attributes for the connecting client. The response must contain a body, so pass an empty map if there are no authorization attributes.
      properties:
        expiry:
          type: string
          format: RFC 3339
          description: Expiry time for this client. The broker will disconnect the client once this time passes. Omit for credentials that do not expire.
        attributes:
          type: object
          description: Authorization attributes for this client.
      example:
        expiry: "2030-05-08T20:04:16+00:00"
        attributes:
          group: group1
    AuthFailResponse:
      type: object
      description: Reason for authentication failure with an optional message
      properties:
        reason:
          type: integer
          format: uint8
          description: MQTT reason code to return in CONNACK
          example: 135
        message:
          type: string
          description: Error message for the IoT MQ broker to log
          example: error message
      required:
      - reason
    ErrorResponse:
      type: string
      description: Error message for the IoT MQ broker to log
      example: error message
